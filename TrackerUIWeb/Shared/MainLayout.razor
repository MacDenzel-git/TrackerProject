 @inherits LayoutComponentBase
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
    @inject NavigationManager NavigationManager
    @inject AuthenticationStateProvider AuthenticationStateProvider
    @using System.Security.Claims

<div class="bb-page">


    <Sidebar @ref="sidebar"
    Href="/"
    CustomIconName="bi bi-AlarmFill"
    Title="PMT"
    BadgeText="v1.0.0"
    DataProvider="SidebarDataProvider" />

    @*     <AuthorizeView Roles="cashier,Manager,Senior Management">
            <Authorized>

            </Authorized>

        </AuthorizeView> *@


    <main>
        <div class="bb-top-row px-4 d-flex justify-content-between">


            @*   <Button Color="ButtonColor .Primary" @onclick="LogIn"><span class="glyphicon glyphicon-log-in"></span> Login </Button>
 *@

            <Icon Name="IconName.List" role="button" @onclick="ToggleSidebar" />
            @if (authenticationState != null)
            {
                <Button Color="ButtonColor.Danger" @onclick="Logout"><span class="glyphicon glyphicon-log-out"></span> Log Out </Button>
            }
        </div>

        <article class="content px-4">
            <div class="py-2">@Body</div>

        </article>
    </main>

</div>
<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />
@code {
    Sidebar sidebar = default!;
    IEnumerable<NavItem> navItems;
    private string UserName = "";
    private string ShopName = "";
    private string UserRole = "";
    private int ShopId =0;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }


    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        // Ensure the AuthenticationState is initialized before use
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }




    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        // await sessionStorage.SetItemAsync("LoggedInUser", "Denzel");
        // await sessionStorage.SetItemAsync("Role", "Admin");
        // await sessionStorage.SetItemAsync("shopId", 1);
        // await sessionStorage.SetItemAsync("shopName", "Mzuzu Main");

        if (navItems is null)
            navItems = await GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private async Task<IEnumerable<NavItem>> GetNavItems()
    {        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();


        if (authState != null)
        {
            var user = authState.User;
            @if (user.Identity.IsAuthenticated)
            {

                UserName = user.Identity.Name;
                UserRole = user.FindFirst(ClaimTypes.Role)?.Value;
                ShopId = Convert.ToInt32(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                ShopName = user.FindFirst(ClaimTypes.Locality)?.Value;


                if (UserRole.ToLower() == "cashier")
                {
                    return navItems = new List<NavItem>

                    {
                     new NavItem { Id = "1", Href = "/Shop", IconName = IconName.Shop, Text = "Shop", },
                     new NavItem { Id = "2", Href = "/pos", IconName = IconName.Cash, Text = "POS", },
                    };

                }
                else
                {
                    navItems = new List<NavItem>
                    {
                        new NavItem { Id = "1", Href = "/ReportDashboard", IconName = IconName.HouseDoorFill, Text = "Dashboard"},
                        new NavItem { Id = "3", Href = "/Product/ProductConfiguration", IconName = IconName.WindowPlus, Text = "Products"},
                        new NavItem { Id = "4", Href = "/Stock/StockManagement", IconName = IconName.CurrencyDollar, Text = "Stock Management"},
                        new NavItem { Id = "5", Href = "/Shop", IconName = IconName.Shop, Text = "Shops", },
                        new NavItem { Id = "5", Href = "/Reports", IconName = IconName.Receipt, Text = "Reports", },

                    };

                }
                return navItems;

            }
            else
            {
                NavigationManager.NavigateTo("/login");

                return new List<NavItem> { };

            }

        }
        else
        {
            NavigationManager.NavigateTo("/login");

            return new List<NavItem> { };

        }
    }

    private void ToggleSidebar()
    {
        if (UserRole.ToLower() == "cashier")
        {
        }else
        {
            sidebar.ToggleSidebar();

        }
    }


    private void Logout()
    {
        sessionStorage.ClearAsync();

        NavigationManager.NavigateTo("/login", true);


    }

    private void LogIn()
    {
        sessionStorage.ClearAsync();
        NavigationManager.NavigateTo("/Login");


    }
}
 