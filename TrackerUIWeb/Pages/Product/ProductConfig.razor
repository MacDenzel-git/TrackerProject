@page "/Product/ProductConfiguration"

 
@using AllinOne.DataHandlers
@using DataAccessLayer.DataTransferObjects
@using Microsoft.AspNetCore.Components;
@using TrackerUIWeb.Data.ApiGateway
@using TrackerUIWeb.Data.DataTransferObjects
@using TrackerUIWeb.Utilities
 
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavigationManager
 @inject HttpHandlerService httpHandler
 
@inject IUtilService _UtilService;


@* <h1>@Title</h1>
 *@
<hr />


<div>
    <Modal @ref="modal"
           title=@Title>

        <BodyTemplate>

            @if (!string.IsNullOrEmpty(OutputHandler.Message))
            {
                if (OutputHandler.IsErrorOccured)
                {
                    <p class="text-danger">@OutputHandler.Message</p>
                }
                else
                {
                    <p class="text-success">@OutputHandler.Message</p>
                }


            }
<EditForm Model="@Product" OnValidSubmit="Save">
         
                <div class="row">
                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">    Product Name</label>
                            <InputText class="form-control" @bind-Value="Product.ProductName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Description</label>
                            <InputText class="form-control" @bind-Value="Product.Description"></InputText>
                        </div>
                         <div class="form-group">
                            <label for="exampleFormControlInput1">   Quantity In Stock</label>
                            <InputNumber class="form-control" @bind-Value="Product.DiscountQuantity"></InputNumber>
                        </div>  
                        <div class="form-group">
                            <label for="exampleFormControlInput1">Price</label>
                            <InputNumber class="form-control" @bind-Value="Product.DiscountPercent"></InputNumber>
                        </div> 
                        @* <div class="form-group">
                            <label for="exampleFormControlInput1">  Reorder Level</label>
                            <InputNumber class="form-control" @bind-Value="Product.ReorderLevel"></InputNumber>
                        </div> *@
                        <div class="mb-3 col-md-3">
                            <label for="Name" class="form-label">Categories</label>
                            <select required for="CategoryId" class="form-control" @bind="@Product.CategoryId">
                                @foreach (var item in CategoryList.OrderByDescending(x => x.CategoryName))
                                {
                                    <option selected="@item.CategoryId" value="@item.CategoryId">
                                        @item.CategoryName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => Product.CategoryId)" />
                        </div>
                    </form>
                </div>
</EditForm>


        </BodyTemplate>
        <FooterTemplate>

            @if (Action.ToLower() == "edit")
            {
                <Button Color="ButtonColor.Primary" @onclick="Save">Save changes</Button>
            }
            else if (Action.ToLower() == "delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="RequestDelete ">Confirm Delete</Button>
            }
            else if (Action.ToLower() == "approve delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="ApproveDelete">Approve Delete</Button>
            }
            else
            {
                <Button Color="ButtonColor.Danger" @onclick=Save>Create Product</Button>
            }
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        </FooterTemplate>

    </Modal>


    <Button Color="ButtonColor.Primary" @onclick="Create">Create Product</Button>

    
</div>






<div>
    <Modal @ref="ShopProductModal"
           title=@Title>

        <BodyTemplate>

            @if (!string.IsNullOrEmpty(OutputHandler.Message))
            {
                if (OutputHandler.IsErrorOccured)
                {
                    <p class="text-danger">@OutputHandler.Message</p>
                }
                else
                {
                    <p class="text-success">@OutputHandler.Message</p>
                }


            }
            <EditForm Model="@ShopProduct" OnValidSubmit="Save">

                <div class="row">
                    <form>
                        <div class="mb-3 col-md-3">
                            <label for="Name" class="form-label">Shops</label>
                            <select required for="CategoryId" class="form-control" @bind="@ShopProduct.ShopId">
                                <option >
                                    Select Shop
                                </option>
                                @foreach (var item in ShopsList.OrderByDescending(x => x.ShopName))
                                {
                                    <option  value="@item.ShopId">
                                        @item.ShopName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => ShopProduct.ShopId)" />
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">    Product Name</label>
                            <InputText readonly="true" class="form-control" @bind-Value="ShopProduct.ProductName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Description</label>
                            <InputText class="form-control" @bind-Value="ShopProduct.Description"></InputText>
                        </div>
                           <div class="form-group">
                        <label for="exampleFormControlInput1">   Quantity In Stock</label>
                        <InputNumber class="form-control" @bind-Value="ShopProduct.QuantityInStock"></InputNumber>
                        </div>  
                          <div class="form-group">
                        <label for="exampleFormControlInput1">Price</label>
                        <InputNumber class="form-control" @bind-Value="ShopProduct.Price"></InputNumber>
                        </div> 


                        <div class="form-group">
                        <label for="exampleFormControlInput1">  Reorder Level</label>
                            <InputNumber class="form-control" @bind-Value="ShopProduct.ReorderLevel"></InputNumber>
                        </div>
                      
                    </form>
                </div>
            </EditForm>


        </BodyTemplate>
        <FooterTemplate>

            @if (Action.ToLower() == "edit")
            {
                <Button Color="ButtonColor.Primary" @onclick="Save">Save changes</Button>
            }
            else if (Action.ToLower() == "delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="RequestDelete ">Confirm Delete</Button>
            }
            else if (Action.ToLower() == "approve delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="ApproveDelete">Approve Delete</Button>
            }
            else
            {
                <Button Color="ButtonColor.Danger" @onclick=ConfirmAddToShop>Add Product to shop </Button>
            }
            <Button Color="ButtonColor.Secondary" @onclick="OnHideShopProductModalClick">Close</Button>
        </FooterTemplate>

    </Modal>


     


</div>







@if (ProductList is null)
{

}
else
{
    @if (ProductList.Count() == 0)
    {
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />
    }
    else
    {
        @* <h1>Uploads</h1>
    <div class="row">
        <div class="col-md-6">
            <a href='/Upload/add' class="btn btn-primary" role="button">
                <i class="fas fa-upload-plus"></i>
                Add Upload
            </a>
        </div>

    </div> *@
        <br />
        <table class="table table-striped table-sm align-middle table-bordered">
            <thead class="table-success">
                <tr>
                    <th> Name</th>
                    <th>Description</th>
                  @*   <th>In Stock</th>
                    <th>Reorder Level</th>
                    <th>Price</th> *@
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ProductList)
                {
                    <tr>


                        <td>@item.ProductName</td>
                        <td class="text">@item.Description</td>
                        @* <td class="text">@item.QuantityInStock</td>
                        <td class="text">@item.ReorderLevel</td>
                        <td class="text">@item.Price</td> *@



                        <td>
                            @if (item.IsDeleted == true)
                            {
                                <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.ProductId)">Approve Delete</button>
                            }
                            else
                            {
                                <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.ProductId)">Delete</button>

                            }
                            <button class="btn btn-sm btn-danger" @onclick="()=>Edit(item.ProductId)">Edit</button> 
                            <button class="btn btn-sm btn-danger" @onclick="()=>AddToShop(item.ProductId)">Add to Shop</button>
                            @*                         <button class="btn btn-danger" @onclick="()=>Delete(item.ProductId)">Delete</button>
                *@
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    }
}

 
@code {
    private ProductDTO Product { get; set; } = new ProductDTO();
    private ShopProductDTO ShopProduct { get; set; } = new ShopProductDTO();
    private IEnumerable<ProductDTO> ProductList = new List<ProductDTO> {};
    private IEnumerable<ShopProductDTO> ShopProductList = new List<ShopProductDTO> {};
    private IEnumerable<ShopDTO> ShopsList = new List<ShopDTO> {};
    private string Action = "";
    private IEnumerable<CategoryDTO> CategoryList = new List<CategoryDTO>();

    private int ProductId { get; set; }
    protected string Title = "";
    // protected string Title = "Configure Product";
    private bool IsCancelRequest;
    protected OutputHandler OutputHandler = new();



    protected override async Task OnInitializedAsync()
    {
        bool loggedInUser = await sessionStorage.GetItemAsync<bool>("IsAuthenticated");
                if (loggedInUser == false)
                {

                    NavigationManager.NavigateTo("/Login");
                }

        string Role = await sessionStorage.GetItemAsync<string>("Role");
        string Username = await sessionStorage.GetItemAsync<string>("LoggedInUser");

        if (!string.IsNullOrEmpty(Role))
        {
            ShopProductList = await httpHandler.GetList<ShopProductDTO>("ShopProduct/GetAllProducts");
            ProductList = await httpHandler.GetList<ProductDTO>("Product/GetAllProducts");
            CategoryList = await httpHandler.GetList<CategoryDTO>("Category/GetAllCategories");

            if (Role.ToLower().Equals("supervisor") || Role.ToLower().Equals("admin"))
            {
                if (ProductList is null)
                {

                }else
                {
                    ProductList = ProductList.Where(x => x.DeletedBy != Username);

                }
            }
            else
            {
                ProductList = ProductList.Where(x => x.IsDeleted == false);
            }

        }
        if (true)
        {

        }
    }




    protected async Task<OutputHandler> Save()
    {

        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");

        if (Action == "edit")
        {
            OutputHandler = await httpHandler.Update<ProductDTO>("Product/Update", Product);

            if (OutputHandler.IsErrorOccured == false)
            {
                NavigationManager.NavigateTo("/Product/ProductConfiguration", true);
                OnHideModalClick();
            }
            else
            {
                OnProccessCompleteNotify();
            }
        }
        else
        {

            if (Product.ProductId != 0)
            {
                return new OutputHandler { IsErrorOccured = true, Message = "Something went Wrong" };
            }

            OutputHandler = await httpHandler.Create<ProductDTO>("Product/Create", Product);
            if (OutputHandler.IsErrorOccured == false)
            {


                OnProccessCompleteNotify();
                OnHideModalClick();
                NavigationManager.NavigateTo("/Product/ProductConfiguration", true);
            }
            else
            {
                OnProccessCompleteNotify();

            }
        }

        return OutputHandler;


    }



    protected async Task<OutputHandler> ConfirmAddToShop()
    {

        ShopProduct.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        ShopProduct.LoggedInUsername = await sessionStorage.GetItemAsync<string>("Role");
        if (ShopProduct.ShopId is null)
        {
           return OutputHandler = new OutputHandler
                {
                    IsErrorOccured = true,
                    Message = "Choose Shop"
                };
        }
        if (Action == "edit")
        {

            OutputHandler = await httpHandler.Create<ShopProductDTO>("ShopProduct/Create", ShopProduct);

            if (OutputHandler.IsErrorOccured == false)
            {
                NavigationManager.NavigateTo("/ShopProduct/ShopProductConfiguration", true);
                OnHideModalClick();
            }
            else
            {
                OnProccessCompleteNotify();
            }
        }
        else
        {

            if (ShopProduct.ShopProductID != 0)
            {
                return new OutputHandler { IsErrorOccured = true, Message = "Something went Wrong" };
            }

            OutputHandler = await httpHandler.Create<ShopProductDTO>("ShopProduct/Create", ShopProduct);
            if (OutputHandler.IsErrorOccured == false)
            {


                OnProccessCompleteNotify();
                OnHideModalClick();
                NavigationManager.NavigateTo("/Product/ProductConfiguration", true);
            }
            else
            {
                OnProccessCompleteNotify();

            }
        }

        return OutputHandler;


    }

    public void Cancel()
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo("/Product/AllUploads");
    }
    public async void Edit(int product)
    {
        Action = "edit";
        Title = "Edit Product ";
        Product = await httpHandler.Get<ProductDTO>($"Product/GetProduct?ProductId={product}");
        IsCancelRequest = true;
        OnShowModalClick();
    }

    public async void AddToShop(int product)
    {
        Action = "ATS";
        Title = "Add Product To shop";
        ShopProduct.ProductID = product;
        ShopProduct.ProductName = ProductList.Where(x => x.ProductId == product).FirstOrDefault().ProductName;
        ShopsList = await httpHandler.GetList<ShopDTO>("Shop/GetAllShops");
        IsCancelRequest = true;
        OnShowShopModalClick();
    }

    public async void Create()
    {
        Action = "Create";
        Title = "Create Product";
        Product = new ProductDTO { };
        IsCancelRequest = true;
        OnShowModalClick();
    }
    public async void Delete(int product)
    {
        IsCancelRequest = true;
        Title = "Delete Product";
        Action = "delete";

        Product = await httpHandler.Get<ProductDTO>($"Product/GetProduct?ProductId={product}");
        if (Product.IsDeleted == true)
        {
            Action = "Approve Delete";
        }
        OnShowModalClick();
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender)
    //     {

    //         bool loggedInUser =  _Utilservice.IsUserAuthenticated();
    //         if (loggedInUser == false)
    //         {
    //             NavigationManager.NavigateTo("/");
    //         }else
    //         {
    //             NavigationManager.NavigateTo("/Login");
    //         }
    //     }

    //  }
    protected async Task RequestDelete()
    {
        Product.IsDeleted = true;
        Product.DeletedBy = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        //Product.
        // Product.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<ProductDTO>("Product/DeleteRequest", Product);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Product/ProductConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    protected async Task ApproveDelete()
    {
        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        Product.DeletedApprover = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.DateDeleted = DateTime.Now;
        // Product.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<ProductDTO>("Product/DeleteApproval", Product);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Product/ProductConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    public void PullActions(int product)
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo($"/Product/Tracker/{product}");
    }







    private Modal modal = default!;
    private Modal ShopProductModal = default!;

    [Inject] ToastService ToastService { get; set; } = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }
    
    private async Task OnShowShopModalClick()
    {
        await ShopProductModal.ShowAsync();
    }


    private async Task OnHideShopModalClick()
    {
        await ShopProductModal.HideAsync();
    }


    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        NavigationManager.NavigateTo("/Product/ProductConfiguration", true);

    }

    private async Task OnHideShopProductModalClick()
    {
        await ShopProductModal.HideAsync();
        NavigationManager.NavigateTo("/Product/ProductConfiguration", true);

    }

    private void OnModalShowing()
    {
        ToastService.Notify(new(ToastType.Primary, $"Event: Showing called. DateTime: {DateTime.Now}"));
    }

    private void OnModalShown()
    {
        ToastService.Notify(new(ToastType.Success, $"Event: Show called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHiding()
    {
        ToastService.Notify(new(ToastType.Danger, $"Event: Hiding called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidden()
    {
        ToastService.Notify(new(ToastType.Warning, $"Event: Hide called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidePrevented()
    {
        ToastService.Notify(new(ToastType.Info, $"Event: Hide Prevented called. DateTime: {DateTime.Now}"));
    }

    private void OnProccessCompleteNotify()
    {
        ToastService.Notify(new(ToastType.Info, $"{OutputHandler.Message}"));
    }



}





@* <form>
    <div class="form-group">
        <label for="exampleFormControlInput1">Email address</label>
        <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Example select</label>
        <select class="form-control" id="exampleFormControlSelect1">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect2">Example multiple select</label>
        <select multiple class="form-control" id="exampleFormControlSelect2">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlTextarea1">Example textarea</label>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
    </div>
</form> *@