@page "/Product/ProductConfiguration"

 
@using AllinOne.DataHandlers
@using DataAccessLayer.DataTransferObjects
@using Microsoft.AspNetCore.Components;
@using TrackerUIWeb.Data.ApiGateway
@using TrackerUIWeb.Utilities
 
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavigationManager
 @inject HttpHandlerService httpHandler
 
@inject IUtilService _UtilService;


@* <h1>@Title</h1>
 *@
<hr />


<div>
    <Modal @ref="modal"
           title=@Title>

        <BodyTemplate>

            @if (!string.IsNullOrEmpty(OutputHandler.Message))
            {
                if (OutputHandler.IsErrorOccured)
                {
                    <p class="text-danger">@OutputHandler.Message</p>
                }
                else
                {
                    <p class="text-success">@OutputHandler.Message</p>
                }


            }
<EditForm Model="@Product" OnValidSubmit="Save">
         
                <div class="row">
                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">    Product Name</label>
                            <InputText class="form-control" @bind-Value="Product.ProductName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Description</label>
                            <InputText class="form-control" @bind-Value="Product.Description"></InputText>
                        </div>
                         <div class="form-group">
                            <label for="exampleFormControlInput1">   Quantity In Stock</label>
                            <InputNumber class="form-control" @bind-Value="Product.QuantityInStock"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">Price</label>
                            <InputNumber class="form-control" @bind-Value="Product.Price"></InputNumber>
                        </div> 
                        <div class="form-group">
                            <label for="exampleFormControlInput1">  Reorder Level</label>
                            <InputNumber class="form-control" @bind-Value="Product.ReorderLevel"></InputNumber>
                        </div>
                        <div class="mb-3 col-md-3">
                            <label for="Name" class="form-label">Categories</label>
                            <select required for="CategoryId" class="form-control" @bind="@Product.CategoryId">
                                @foreach (var item in CategoryList.OrderByDescending(x => x.CategoryName))
                                {
                                    <option selected="@item.CategoryId" value="@item.CategoryId">
                                        @item.CategoryName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => Product.CategoryId)" />
                        </div>
                    </form>
                </div>
</EditForm>


        </BodyTemplate>
        <FooterTemplate>

            @if (Action.ToLower() == "edit")
            {
                <Button Color="ButtonColor.Primary" @onclick="Save">Save changes</Button>
            }
            else if (Action.ToLower() == "delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="RequestDelete ">Confirm Delete</Button>
            }
            else if (Action.ToLower() == "approve delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="ApproveDelete">Approve Delete</Button>
            }
            else
            {
                <Button Color="ButtonColor.Danger" @onclick=Save>Create Product</Button>
            }
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        </FooterTemplate>

    </Modal>


    <Button Color="ButtonColor.Primary" @onclick="Create">Create New</Button>
</div>

@if (ProductList is null)
{
    
}else{
@if (ProductList.Count() == 0)
{
    <div class="spinner"></div>
}
else
{
    @* <h1>Uploads</h1>
    <div class="row">
        <div class="col-md-6">
            <a href='/Upload/add' class="btn btn-primary" role="button">
                <i class="fas fa-upload-plus"></i>
                Add Upload
            </a>
        </div>

    </div> *@
    <br />
    <table class="table table-striped table-sm align-middle table-bordered" >
        <thead class="table-success">
            <tr>
                <th>Product Name</th>
                <th>Contact Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
         

                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ProductList)
            {
                <tr>


                    <td>@item.ProductName</td>
                    <td class="text">@item.Description</td>
                    <td class="text">@item.QuantityInStock</td>
                    <td class="text">@item.ReorderLevel</td>
                    <td class="text">@item.Price</td>
                   


                    <td>
                        @if (item.IsDeleted == true)
                        {
                            <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.ProductId)">Approve Delete</button>
                        }
                        else
                        {
                            <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.ProductId)">Delete</button>

                        }
                        <button class="btn btn-sm btn-danger" @onclick="()=>Edit(item.ProductId)">Edit</button>
@*                         <button class="btn btn-danger" @onclick="()=>Delete(item.ProductId)">Delete</button>
 *@                    </td>
                </tr>
            }
        </tbody>

    </table>

}
}
@code {
    private ProductDTO Product { get; set; } = new ProductDTO();
    private IEnumerable<ProductDTO> ProductList = new List<ProductDTO> {  };
    private string Action = "";
    private IEnumerable<CategoryDTO> CategoryList = new List<CategoryDTO>();

    private int ProductId { get; set; }
    protected string Title = "";
    // protected string Title = "Configure Product";
    private bool IsCancelRequest;
    protected OutputHandler OutputHandler = new();



    protected override async Task OnInitializedAsync()
    {
        // bool loggedInUser = await _UtilService.IsUserAuthenticated();
        //         if (loggedInUser == false)
        //         {

        //             NavigationManager.NavigateTo("/Login");
        //         }

        string Role = await sessionStorage.GetItemAsync<string>("Role");
        string Username = await sessionStorage.GetItemAsync<string>("LoggedInUser");

        if (!string.IsNullOrEmpty(Role))
        {
            ProductList = await httpHandler.GetList<ProductDTO>("Product/GetAllProducts");
            CategoryList = await httpHandler.GetList<CategoryDTO>("Category/GetAllCategories");

            if (Role.ToLower().Equals("supervisor") || Role.ToLower().Equals("admin"))
            {
                if (ProductList is null)
                {
                    
                }else
                {
                    ProductList = ProductList.Where(x => x.DeletedBy != Username);

                }
            }
            else
            {
                ProductList = ProductList.Where(x => x.IsDeleted == false);
            }

        }
        if (true)
        {

        }
    }




    protected async Task<OutputHandler> Save()
    {

        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");

        if (Action == "edit")
        {
            OutputHandler = await httpHandler.Update<ProductDTO>("Product/Update", Product);

            if (OutputHandler.IsErrorOccured == false)
            {
                NavigationManager.NavigateTo("/Product/ProductConfiguration", true);
                OnHideModalClick();
            }
            else
            {
                OnProccessCompleteNotify();
            }
        }
        else
        {




            if (Product.ProductId != 0)
            {
                return new OutputHandler { IsErrorOccured = true, Message = "Something went Wrong" };
            }

            OutputHandler = await httpHandler.Create<ProductDTO>("Product/Create", Product);
            if (OutputHandler.IsErrorOccured == false)
            {


                OnProccessCompleteNotify();
                OnHideModalClick();
                NavigationManager.NavigateTo("/Product/ProductConfiguration", true);
            }
            else
            {
                OnProccessCompleteNotify();

            }
        }

        return OutputHandler;


    }



    public void Cancel()
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo("/Product/AllUploads");
    }
    public async void Edit(int projectId)
    {
        Action = "edit";
        Title = "Edit Product ";
        Product = await httpHandler.Get<ProductDTO>($"Product/GetProduct?ProductId={projectId}");
        IsCancelRequest = true;
        OnShowModalClick();
    }


    public async void Create()
    {
        Action = "Create";
        Title = "Create Product";
        Product = new ProductDTO { };
        IsCancelRequest = true;
        OnShowModalClick();
    }
    public async void Delete(int projectId)
    {
        IsCancelRequest = true;
        Title = "Delete Product";
        Action = "delete";

        Product = await httpHandler.Get<ProductDTO>($"Product/GetProduct?ProductId={projectId}");
        if (Product.IsDeleted == true)
        {
            Action = "Approve Delete";
        }
        OnShowModalClick();
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender)
    //     {

    //         bool loggedInUser =  _Utilservice.IsUserAuthenticated();
    //         if (loggedInUser == false)
    //         {
    //             NavigationManager.NavigateTo("/");
    //         }else
    //         {
    //             NavigationManager.NavigateTo("/Login");
    //         }
    //     }

    //  }
    protected async Task RequestDelete()
    {
        Product.IsDeleted = true;
        Product.DeletedBy = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        //Product.
        // Product.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<ProductDTO>("Product/DeleteRequest", Product);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Product/ProductConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    protected async Task ApproveDelete()
    {
        Product.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        Product.DeletedApprover = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Product.DateDeleted = DateTime.Now;
        // Product.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<ProductDTO>("Product/DeleteApproval", Product);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Product/ProductConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    public void PullActions(int projectId)
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo($"/Product/Tracker/{projectId}");
    }







    private Modal modal = default!;

    [Inject] ToastService ToastService { get; set; } = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private void OnModalShowing()
    {
        ToastService.Notify(new(ToastType.Primary, $"Event: Showing called. DateTime: {DateTime.Now}"));
    }

    private void OnModalShown()
    {
        ToastService.Notify(new(ToastType.Success, $"Event: Show called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHiding()
    {
        ToastService.Notify(new(ToastType.Danger, $"Event: Hiding called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidden()
    {
        ToastService.Notify(new(ToastType.Warning, $"Event: Hide called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidePrevented()
    {
        ToastService.Notify(new(ToastType.Info, $"Event: Hide Prevented called. DateTime: {DateTime.Now}"));
    }

    private void OnProccessCompleteNotify()
    {
        ToastService.Notify(new(ToastType.Info, $"{OutputHandler.Message}"));
    }



}





@* <form>
    <div class="form-group">
        <label for="exampleFormControlInput1">Email address</label>
        <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Example select</label>
        <select class="form-control" id="exampleFormControlSelect1">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect2">Example multiple select</label>
        <select multiple class="form-control" id="exampleFormControlSelect2">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlTextarea1">Example textarea</label>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
    </div>
</form> *@