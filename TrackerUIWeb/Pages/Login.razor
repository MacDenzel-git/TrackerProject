@page "/"
@page "/login"
@using System.ComponentModel.DataAnnotations
@using AllinOne.DataHandlers
@using DataAccessLayer.DataTransferObjects
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components;
@using System.Security.Claims
@using TrackerUIWeb.Data.ApiGateway
@using TrackerUIWeb.Data.DataTransferObjects
@using TrackerUIWeb.Utilities
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavigationManager;
@inject HttpHandlerService httpHandler;
@inject IUtilService _UtilService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@*  
<AuthorizeView>
    <Authorized>
        <h3>Welcome, @userName</h3>
        <p>You are authenticated and your role is @userRole</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>
 *@
@* Login Page *@

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%; border-radius: 12px;">
        <h3 class="text-center mb-4">Login</h3>
        @if (!string.IsNullOrEmpty(OutputHandler.Message))
        {
            if (OutputHandler.IsErrorOccured)
            {
                <p class="text-danger">@OutputHandler.Message</p>
            }
            else
            {
                <p class="text-success">@OutputHandler.Message</p>
            }


        }
        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter your username" />
                <ValidationMessage For="() => loginModel.Username" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                <ValidationMessage For="() => loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>

            <div class="text-center mt-3">
                <a href="/register" class="text-decoration-none">Don't have an account? Register</a>
            </div>
        </EditForm>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa;
        font-family: Arial, sans-serif;
    }

    .card {
        background-color: #ffffff;
        border: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    label {
        font-weight: bold;
    }

    a {
        color: #007bff;
    }

        a:hover {
            color: #0056b3;
            text-decoration: underline;
        }
</style>

@code {
    private LoginDTO loginModel = new LoginDTO();
    protected OutputHandler OutputHandler = new();



    private async Task<OutputHandler> HandleValidSubmit()
    {

        // Handle login logic here

        LoginDTO loginDetails = await httpHandler.GetSingleItem<LoginDTO>("Account/login", loginModel);
        if (loginDetails.Username == null)
        {
            return OutputHandler = new OutputHandler
                {
                    IsErrorOccured = true,
                    Message = "Wrong Username or Password"
                };
        }
        if (loginDetails.StatusMessage.ToLower() == "success")
        {
            await sessionStorage.SetItemAsync("LoggedInUser", loginDetails.Username);
            await sessionStorage.SetItemAsync("Role", loginDetails.Role);
            await sessionStorage.SetItemAsync("shopId", loginDetails.ShopId);
            await sessionStorage.SetItemAsync("shopName", loginDetails.ShopName);
            await sessionStorage.SetItemAsync("IsAuthenticated", true);

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                userName = user.Identity.Name;
                userRole = user.FindFirst(ClaimTypes.Role)?.Value;
                NavigationManager.NavigateTo("/reportDashboard", true);

            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }




        }
        else
        {
            sessionStorage.ClearAsync();
            return new OutputHandler
                {
                    IsErrorOccured = true,
                    Message = "Wrong username or Password",

                };

        }

        return OutputHandler;

    }



    private string userName;
    private string userRole;






}
