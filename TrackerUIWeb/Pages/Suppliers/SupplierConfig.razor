@page "/Supplier/SupplierConfiguration"

 
@using AllinOne.DataHandlers
@using DataAccessLayer.DataTransferObjects
@using Microsoft.AspNetCore.Components;
@using TrackerUIWeb.Data.ApiGateway
@using TrackerUIWeb.Utilities
 
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavigationManager
 @inject HttpHandlerService httpHandler
 
@inject IUtilService _UtilService;


@* <h1>@Title</h1>
 *@
<hr />


<div>
    <Modal @ref="modal"
           title=@Title>

        <BodyTemplate>

            @if (!string.IsNullOrEmpty(OutputHandler.Message))
            {
                if (OutputHandler.IsErrorOccured)
                {
                    <p class="text-danger">@OutputHandler.Message</p>
                }
                else
                {
                    <p class="text-success">@OutputHandler.Message</p>
                }


            }
            <EditForm Model="@Supplier" OnValidSubmit="Save">
            @*     <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="UploadDescription" class="form-label">
                            Supplier Name
                        </label>
                        <div>
                            <InputText class="" @bind-Value="Supplier.SupplierName"></InputText>
                            <ValidationMessage For="@(() => Supplier.SupplierName)" />
                        </div>
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="Name" class="form-label">Description</label>
                        <div>
                            <InputText @bind-Value="Supplier.Description"></InputText>
                        </div>
                        <ValidationMessage For="@(() => Supplier.Description)" />
                    </div>

                </div> *@
             
             
             
                <div class="row">


                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">    Supplier Name</label>
                            <InputText class="form-control" @bind-Value="Supplier.CompanyName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Contact Name</label>
                            <InputText class="form-control" @bind-Value="Supplier.ContactName"></InputText>
                        </div>
                         <div class="form-group">
                            <label for="exampleFormControlInput1">   Contact Email</label>
                            <InputText class="form-control" @bind-Value="Supplier.ContactEmail"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Phone</label>
                            <InputText class="form-control" @bind-Value="Supplier.Phone"></InputText>
                        </div> 
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Address</label>
                            <InputText class="form-control" @bind-Value="Supplier.Address"></InputText>
                        </div>
                        
                    </form>
                </div>

            </EditForm>


        </BodyTemplate>
        <FooterTemplate>

            @if (Action.ToLower() == "edit")
            {
                <Button Color="ButtonColor.Primary" @onclick="Save">Save changes</Button>
            }
            else if (Action.ToLower() == "delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="RequestDelete ">Confirm Delete</Button>
            }
            else if (Action.ToLower() == "approve delete")
            {
                <Button Color="ButtonColor.Primary" @onclick="ApproveDelete">Approve Delete</Button>
            }
            else
            {
                <Button Color="ButtonColor.Danger" @onclick=Save>Create Supplier</Button>
            }
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        </FooterTemplate>

    </Modal>


    <Button Color="ButtonColor.Primary" @onclick="Create">Create New</Button>
</div>


@if (SupplierList.Count() == 0)
{
    <div class="spinner"></div>
}
else
{
    @* <h1>Uploads</h1>
    <div class="row">
        <div class="col-md-6">
            <a href='/Upload/add' class="btn btn-primary" role="button">
                <i class="fas fa-upload-plus"></i>
                Add Upload
            </a>
        </div>

    </div> *@
    <br />
    <table class="table table-striped table-sm align-middle table-bordered" >
        <thead class="table-success">
            <tr>
                <th>Supplier Name</th>
                <th>Contact Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
         

                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in SupplierList)
            {
                <tr>


                    <td>@item.CompanyName</td>
                    <td class="text">@item.ContactName</td>
                    <td class="text">@item.ContactEmail</td>
                    <td class="text">@item.Phone</td>
                    <td class="text">@item.Address</td>
                   


                    <td>
                        @if (item.IsDeleted == true)
                        {
                            <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.SupplierId)">Approve Delete</button>
                        }
                        else
                        {
                            <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.SupplierId)">Delete</button>

                        }
                        <button class="btn btn-sm btn-danger" @onclick="()=>Edit(item.SupplierId)">Edit</button>
@*                         <button class="btn btn-danger" @onclick="()=>Delete(item.SupplierId)">Delete</button>
 *@                    </td>
                </tr>
            }
        </tbody>

    </table>

}
@code {
    private SupplierDTO Supplier { get; set; } = new SupplierDTO();
    private IEnumerable<SupplierDTO> SupplierList = new List<SupplierDTO>();
    private string Action = "";

    private int SupplierId { get; set; }
    protected string Title = "";
    // protected string Title = "Configure Supplier";
    private bool IsCancelRequest;
    protected OutputHandler OutputHandler = new();



    protected override async Task OnInitializedAsync()
    {
        // bool loggedInUser = await _UtilService.IsUserAuthenticated();
        //         if (loggedInUser == false)
        //         {

        //             NavigationManager.NavigateTo("/Login");
        //         }

        string Role = await sessionStorage.GetItemAsync<string>("Role");
        string Username = await sessionStorage.GetItemAsync<string>("LoggedInUser");

        if (!string.IsNullOrEmpty(Role))
        {
            SupplierList = await httpHandler.GetList<SupplierDTO>("Supplier/GetAllSuppliers");

            if (Role.ToLower().Equals("supervisor") || Role.ToLower().Equals("admin"))
            {
                if (SupplierList is null)
                {
                    
                }else
                {
                    SupplierList = SupplierList.Where(x => x.DeletedBy != Username);

                }
            }
            else
            {
                SupplierList = SupplierList.Where(x => x.IsDeleted == false);
            }

        }
        if (true)
        {

        }
    }




    protected async Task<OutputHandler> Save()
    {

        Supplier.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");

        if (Action == "edit")
        {
            OutputHandler = await httpHandler.Update<SupplierDTO>("Supplier/Update", Supplier);

            if (OutputHandler.IsErrorOccured == false)
            {
                NavigationManager.NavigateTo("/Supplier/SupplierConfiguration", true);
                OnHideModalClick();
            }
            else
            {
                OnProccessCompleteNotify();
            }
        }
        else
        {




            if (Supplier.SupplierId != 0)
            {
                return new OutputHandler { IsErrorOccured = true, Message = "Something went Wrong" };
            }

            OutputHandler = await httpHandler.Create<SupplierDTO>("Supplier/Create", Supplier);
            if (OutputHandler.IsErrorOccured == false)
            {


                OnProccessCompleteNotify();
                OnHideModalClick();
                NavigationManager.NavigateTo("/Supplier/SupplierConfiguration", true);
            }
            else
            {
                OnProccessCompleteNotify();

            }
        }

        return OutputHandler;


    }



    public void Cancel()
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo("/Supplier/AllUploads");
    }
    public async void Edit(int projectId)
    {
        Action = "edit";
        Title = "Edit Supplier ";
        Supplier = await httpHandler.Get<SupplierDTO>($"Supplier/GetSupplier?SupplierId={projectId}");
        IsCancelRequest = true;
        OnShowModalClick();
    }


    public async void Create()
    {
        Action = "Create";
        Title = "Create Supplier";
        Supplier = new SupplierDTO { };
        IsCancelRequest = true;
        OnShowModalClick();
    }
    public async void Delete(int projectId)
    {
        IsCancelRequest = true;
        Title = "Delete Supplier";
        Action = "delete";

        Supplier = await httpHandler.Get<SupplierDTO>($"Supplier/GetSupplier?SupplierId={projectId}");
        if (Supplier.IsDeleted == true)
        {
            Action = "Approve Delete";
        }
        OnShowModalClick();
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender)
    //     {

    //         bool loggedInUser =  _Utilservice.IsUserAuthenticated();
    //         if (loggedInUser == false)
    //         {
    //             NavigationManager.NavigateTo("/");
    //         }else
    //         {
    //             NavigationManager.NavigateTo("/Login");
    //         }
    //     }

    //  }
    protected async Task RequestDelete()
    {
        Supplier.IsDeleted = true;
        Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        //Supplier.
        // Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<SupplierDTO>("Supplier/DeleteRequest", Supplier);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Supplier/SupplierConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    protected async Task ApproveDelete()
    {
        Supplier.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        Supplier.DeleteApprover = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.DateDeleted = DateTime.Now;
        // Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<SupplierDTO>("Supplier/DeleteApproval", Supplier);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Supplier/SupplierConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }


    public void PullActions(int projectId)
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo($"/Supplier/Tracker/{projectId}");
    }







    private Modal modal = default!;

    [Inject] ToastService ToastService { get; set; } = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private void OnModalShowing()
    {
        ToastService.Notify(new(ToastType.Primary, $"Event: Showing called. DateTime: {DateTime.Now}"));
    }

    private void OnModalShown()
    {
        ToastService.Notify(new(ToastType.Success, $"Event: Show called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHiding()
    {
        ToastService.Notify(new(ToastType.Danger, $"Event: Hiding called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidden()
    {
        ToastService.Notify(new(ToastType.Warning, $"Event: Hide called. DateTime: {DateTime.Now}"));
    }

    private void OnModalHidePrevented()
    {
        ToastService.Notify(new(ToastType.Info, $"Event: Hide Prevented called. DateTime: {DateTime.Now}"));
    }

    private void OnProccessCompleteNotify()
    {
        ToastService.Notify(new(ToastType.Info, $"{OutputHandler.Message}"));
    }



}





@* <form>
    <div class="form-group">
        <label for="exampleFormControlInput1">Email address</label>
        <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Example select</label>
        <select class="form-control" id="exampleFormControlSelect1">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect2">Example multiple select</label>
        <select multiple class="form-control" id="exampleFormControlSelect2">
            <option>1</option>
            <option>2</option>
            <option>3</option>
            <option>4</option>
            <option>5</option>
        </select>
    </div>
    <div class="form-group">
        <label for="exampleFormControlTextarea1">Example textarea</label>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
    </div>
</form> *@