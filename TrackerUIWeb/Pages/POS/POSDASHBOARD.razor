@page "/POS"
@page "/POS/{Urlreceipt}"


@using AllinOne.DataHandlers
@using DataAccessLayer.DataTransferObjects
@using Microsoft.AspNetCore.Components;
@using TrackerUIWeb.Data.ApiGateway
@using TrackerUIWeb.Data.DataTransferObjects
@using TrackerUIWeb.Utilities
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject NavigationManager NavigationManager;
@inject HttpHandlerService httpHandler;
@inject IUtilService _UtilService;
<style>
    .outer {
    overflow-y: auto;
    height: 300px;
    }

    .outer {
    width: 100%;
    -layout: fixed;
    }

    .outer th {
    text-align: left;
    top: 0;
    position: sticky;
    background-color: white;
    }


    /* Container for the dropdown and input */
    .searchable-dropdown {
    position: relative;
    width: auto;
    }

    /* Input field styling */
    .search-input {
    width: auto;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    }

    /* Dropdown menu styling */
    .dropdown-menu {
    position: absolute;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
    background-color: white;
    border: 1px solid #ccc;
    border-top: none; /* Remove the top border to blend with the input */
    z-index: 100;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: none;
    }

    /* Display the dropdown only when there are matching items */
    .searchable-dropdown .dropdown-menu {
    display: block;
    }

    /* Styling for each item in the dropdown */
    .dropdown-item {
    padding: 8px;
    cursor: pointer;
    font-size: 16px;
    background-color: white;
    border: none;
    text-align: left;
    width: 100%;
    text-wrap: auto;
    }

    .dropdown-item:hover {
    background-color: #f0f0f0;
    }

    /* Message when no results are found */
    .dropdown-item.no-results {
    font-style: italic;
    color: #999;
    }
</style>





<div class="row">
    <div class="col-4">
        <Button disabled="@IsDisabled" class="p-3 btn btn-sm btn-danger" Color="ButtonColor.Success" @onclick="NewTransaction">
            New
        </Button>
        <button 
        disabled="@_isLoading"
        class="mt-2 btn btn-gb btn-primary  @(_isLoading ? "loading" : "")"
        @onclick="NewTransaction">
            @NewButtonText
        </button>
    </div>
    <div class="col-4">

    </div>
    <div class="col-4">
        <div class="row">
            <div class="col-6 fw-bold"><p> Receipt: @ShopReceipt</p></div>

        </div>
    </div>
</div>


@if (IsSearchFormActive)
{



    @*  <p>Selected Item: @selectedItem</p> *@
    <EditForm Model="@ProductSearch" OnValidSubmit="SearchProduct">
        <div class="row">




            <div class="col-4">
                <div class="form-group">
                    <label for="exampleFormControlInput1">    Search Code</label>
                    <InputText class="form-control" @bind-Value="ProductSearch.ProductCode"></InputText>
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="exampleFormControlInput1">   Quantity</label>
                    <InputNumber class="form-control" @bind-Value="ProductSearch.Quantity"></InputNumber>
                </div>
            </div>
            <div class="col-4 mt-3">
                @*   <Button  Color="ButtonColor.Primary" @onclick="SearchProduct">Search</Button> *@

                <button 
                disabled="@_isLoading"
                class="mt-2 btn btn-gb btn-primary  @(_isLoading ? "loading" : "")">
                    @ButtonText
                </button>
            </div>
            @* <div class="form-group">
                    <label for="exampleFormControlInput1">   Discount</label>
                    <InputNumber class="form-control" @bind-Value="ProductSearch.Discount"></InputNumber>
                </div> *@



        </div>


    </EditForm>
}
@if (!string.IsNullOrEmpty(OutputHandler.Message))
{
    if (OutputHandler.IsErrorOccured)
    {
        <p class="text-danger">@OutputHandler.Message</p>
    }



}

<div class="row">
    <div class="col-3 mt-4">  
        @if (IsSearchFormActive)
        {  
            <div class="searchable-dropdown">
                <!-- Search Input -->
                <input type="text" @bind="searchTerm" @oninput="OnSearchChanged" class="search-input" placeholder="Search items..." />

                <!-- Dropdown Menu -->
                <div class="dropdown-menu">
                    @if (filteredItems.Any())
                    {
                        @foreach (var item in filteredItems)
                        {
                            <button class="dropdown-item" @onclick="() => SelectItem(item.ProductID, item.ProductName )">
                                (@item.ProductID)-@item.ProductName
                            </button>
                        }
                    }
                    else
                    {
                        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />

                    }

                </div>
            </div> } </div>
    <div class="col-9"> <br />
        <div class="outer">
            <table class="table table-striped table-sm align-middle table-bordered">
                <thead class="table-success">
                    <tr>
                        <th>#</th>
                        <th>Product Code</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Discount</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (CartItems.Count() > 0)
                    {
                        @foreach (var item in CartItems)
                        {
                            <tr>


                                <td>@item.CartItemId</td>
                                <td>@item.ProductId</td>
                                <td class="text">@item.ProductName</td>
                                <td class="text">@item.Quantity</td>
                                <td class="text">@item.Price</td>
                                <td class="text">@item.Discount %</td>
                                <td>

                                    <button class="m-1 btn btn-sm btn-danger" @onclick="()=>Delete(item.CartItemId)"> Delete</button>
                                </td>
                            </tr>
                        }   }


                </tbody>

            </table>
        </div>
        <table class="table table-striped table-sm align-middle table-bordered">
            <thead class="">
                <tr>
                    <th style="color:white !important">Product Code</th>
                    <th style="color:white !important">Product Name</th>
                    <th style="color:black !important">Total</th>
                    <th style="color:black !important">@Total</th>
                    <th style="color:white !important">Action</th>
                </tr>
            </thead>
            <tbody>


            </tbody>

        </table>
        <div class="row">
            <div class="col-2">
                @if (IsCheckOutButtonActive)
                {
                    <button class="p-3 btn btn-sm btn-danger" @onclick="()=>CheckOut()"> Checkout </button>

                }  
            </div>
            <div class="col-6">@if (CheckoutOptionIsActive)
                {


                    <button class="p-3  btn btn-sm btn-success" @onclick="()=>Cash()"> CASH </button>


                    <button class="p-3 mx-4 btn btn-sm btn-warning" @onclick="()=>Visa()"> VISA </button>


                    <button class="p-3  btn btn-sm btn-primary" @onclick="()=>MobileMoney()"> MOBILE MONEY </button>


                }</div>
            <div class="col-2">
                <div class="row">


                </div>
            </div>
        </div>
    </div>
</div>





@* PAYMODE MODALS *@

@* CASH START *@
<div>
    <Modal @ref="cashModal"
    title=@Title>

        <BodyTemplate>

            @if (!string.IsNullOrEmpty(OutputHandler.Message))
            {
                if (OutputHandler.IsErrorOccured)
                {
                    <p class="text-danger">@OutputHandler.Message</p>
                }
                else
                {
                    <p class="text-success">@OutputHandler.Message</p>
                }


            }
            <EditForm Model="@Payment" OnValidSubmit="MakePayment">

                <div class="row">
                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">    Total</label>
                            <InputNumber class="form-control" readOnly="true" @bind-Value="Payment.AmountExpected"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlInput1">   Amount Paid</label>
                            <InputNumber class="form-control" @bind-Value="Payment.AmountPaid"></InputNumber>
                        </div>
                        <Button  Class="p-3 mt-2" Color="ButtonColor.Success" @onclick="MakePayment"  >Pay</Button>

                    </form>
                </div>
            </EditForm>


        </BodyTemplate>
        <FooterTemplate>


            <Button Color="ButtonColor.Secondary" @onclick="OnHideCashModalClick">Close</Button>
        </FooterTemplate>

    </Modal>




</div>
@* CASH END *@






@code 
{
    [Parameter] 
    public string Urlreceipt { get; set; } = "NoParamSet";
    private SupplierDTO Supplier { get; set; } = new SupplierDTO();
    private PaymentDTO Payment { get; set; } = new PaymentDTO();
    private ProductSearchDTO ProductSearch { get; set; } = new ProductSearchDTO();
    private ShopProductDTO Product { get; set; } = new ShopProductDTO();
    private JournalEntryDTO JournalEntry = new JournalEntryDTO();
    private List<CartItemsDTO> CartItems = new List<CartItemsDTO>();

    // Filtered items based on the search term
    private IEnumerable<ShopProductDTO> filteredItems => string.IsNullOrEmpty(searchTerm) ? items : items.Where(item => item.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    [Inject] ToastService ToastService { get; set; } = default!;

    private bool IsDisabled = false;
    private string Action = "";
    string Role = "";
    private int SupplierId { get; set; }
    private int ShopId { get; set; }
    protected string Title = "";
    protected string ShopReceipt = "";
    // protected string Title = "Configure Supplier";
    private bool IsCancelRequest;
    private bool CheckoutOptionIsActive =false;
    private bool IsSearchFormActive =false;
    private bool IsCheckOutButtonActive =false;
    protected OutputHandler OutputHandler = new();
    protected decimal Total = 0;
    string Paymode = "";
    int CartItemId = 0;
    private List<ShopProductDTO> items = new List<ShopProductDTO>() { };


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        Role = await sessionStorage.GetItemAsync<string>("Role");
        ShopId = await sessionStorage.GetItemAsync<int>("shopId");
        string Username = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        var list  =  await httpHandler.GetList<ShopProductDTO>($"ShopProduct/GetAllShopProducts?shopId={ShopId}");

        foreach (var item in list)
        {
            items.Add(item);
        }
        if(Urlreceipt != null)
        {
            if (Urlreceipt != null)
            {
                //get cart items by receipt 
                ShopReceipt = Urlreceipt;
                var cartItemsbyReceipt = await httpHandler.GetList<CartItemsDTO>($"POS/GetCartItems?receipt={Urlreceipt}");
                foreach (var item in cartItemsbyReceipt.ToList())
                {
                    CartItems.Add(item);
                    Total += item.Price * item.Quantity;
                }
                if (CartItems.Count() > 0)
                {
                    IsCheckOutButtonActive = true;
                }

                IsDisabled = true;

            }
        }     
        _isLoading = false;

    }
    private bool _isLoading = false;
    private string ButtonText =>
  _isLoading ? "Processing..." : "Search";


    private string NewButtonText =>
    _isLoading ? "Processing..." : "NEW";
    private async Task HandleClick()
    {
        _isLoading = true;

        await Task.Delay(3000); // Simulating a long-running operation

        _isLoading = false;
    }

    protected async Task<OutputHandler> NewTransaction()
    {
        _isLoading = true;
        if(CartItems.Count()>0){
            return OutputHandler = new OutputHandler { IsErrorOccured = true, Message = "Please Clear Cart First or checkout items" };
        }
        JournalEntry.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        JournalEntry.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        ShopId = await sessionStorage.GetItemAsync<int>("shopId");


        JournalEntry = new JournalEntryDTO
                {
                Processedby = JournalEntry.LoggedInUsername,
                LoggedInUsername = JournalEntry.LoggedInUsername,
                LoggedInUserRole = JournalEntry.LoggedInUserRole,
                ShopId = ShopId,
                 ReceiptNo ="",
                Rev = "-1",
                DrCr = "C",
                ProcessedStatus = "0",
                PayMode = "",
                TranscationDetails = "Transaction Started",
                Revreq = "0",

                CreatedDateTime = DateTime.Now,
                ProcessDateTime = DateTime.Now,
                CartItems = new List<CartItemsDTO>{}
                };
        OutputHandler = await httpHandler.Create<JournalEntryDTO>("POS/NewTransaction", JournalEntry);

        if (OutputHandler.IsErrorOccured == false)
        {
            ProductSearch.Quantity = 1;
            ShopReceipt = OutputHandler.Result.ToString();
            OnProccessCompleteNotify();
            IsSearchFormActive = true;
        }
        else
        {
            // OnProccessCompleteNotify();
        }


        _isLoading = false;
        return OutputHandler;


    }


    protected async Task<OutputHandler> MakePayment()
    {
        JournalEntry.CartItems = CartItems;
        JournalEntry.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        JournalEntry.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");

        JournalEntry.PayMode = Paymode;
        JournalEntry.AmountPaid= Payment.AmountExpected;
        JournalEntry.AmountReceivedFromCustomer = Payment.AmountPaid;
        JournalEntry.CashBack = JournalEntry.AmountReceivedFromCustomer - Payment.AmountExpected;
        JournalEntry.ReceiptNo = ShopReceipt;
        JournalEntry.ChequeNumber = "";
        JournalEntry.Rev = "";
        JournalEntry.Revreq = "";
        JournalEntry.ShopId = ShopId;
        JournalEntry.ProcessedStatus = "0";
        JournalEntry.DrCr = "C";
        JournalEntry.NumberOfCartItems = CartItemId;
        JournalEntry.Processedby = JournalEntry.LoggedInUsername;
        JournalEntry.CreatedDateTime = DateTime.Now;
        JournalEntry.ProcessDateTime = DateTime.Now;
        OutputHandler = await httpHandler.Update<JournalEntryDTO>("POS/Payment", JournalEntry);
        @inject IJSRuntime JSRuntime;
        if (OutputHandler.IsErrorOccured == false)
        {
            OnHideCashModalClick();
            OnProccessCompleteNotify();
            string url = $"/PrintReceipt/{ShopReceipt}";
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");                        // await JSRuntime.InvokeAsync<object>("open", "navigate", "_blank");
            NavigationManager.NavigateTo($"/POS",true);
        }
        else
        {
            return OutputHandler;
        }


        return OutputHandler;


    }

    protected async Task<OutputHandler> SearchProduct()
    {        _isLoading = true;

        OutputHandler = new OutputHandler
                {
                    IsErrorOccured = false,
                    Message = ""
                };
        Supplier.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        ProductSearch.ShopId = await sessionStorage.GetItemAsync<int>("shopId");
        ProductSearch.ReceiptNumber = ShopReceipt;

        if (string.IsNullOrEmpty(ProductSearch.ProductCode))
        {        _isLoading = false;

            return OutputHandler = new OutputHandler { IsErrorOccured = true, Message = "Enter Product Code" };
        }


        if (ProductSearch.Quantity < 1)
        {        _isLoading = false;

            return OutputHandler = new OutputHandler { IsErrorOccured = true, Message = "Add Quantity" };
        }
        OutputHandler = new OutputHandler
                {
                    IsErrorOccured = false,
                    Message = ""
                };



        CartItemId++;
        ProductSearch.CartItemId = CartItemId; 
        Product = await httpHandler.GetSingle<ShopProductDTO>("POS/SearchProduct", ProductSearch);
        if (Product is null)
        {
            OutputHandler = new OutputHandler
                {
                    IsErrorOccured = true,
                    Message = "Quantity Low"
                };

            return OutputHandler;
        }
        if (Product.QuantityInStock < ProductSearch.Quantity)
        {
            OutputHandler = new OutputHandler
                {
                    IsErrorOccured = true,
                    Message = "Quantity Low"
                };
        }else
        {

            Total += Convert.ToDecimal( Product.CartItemPrice);
            CartItems.Add(
                new CartItemsDTO
                    {
                        ProductId = Product.ProductID,
                        JournalEntryId = Product.JournalEntryId,
                        Price = Convert.ToDecimal( Product.CartItemPrice),
                        Quantity = ProductSearch.Quantity,
                        ProductName = Product.ProductName,
                        ReceiptNumber=ShopReceipt,
                        CartItemId = CartItemId,
                        Discount = Convert.ToInt32(Product.CartItemDiscount)
                    });

            IsDisabled = true;
        }
        if (OutputHandler.IsErrorOccured == false)
        {
            ///added notificaation
        }
        else
        {
            OnProccessCompleteNotify();
        }

        if (CartItems.Count() > 0)
        {
            IsCheckOutButtonActive = true;
        }

        _isLoading = false;

        return OutputHandler;


    }

    public void Cancel()
    {
        IsCancelRequest = true;
        NavigationManager.NavigateTo("/Supplier/AllUploads");
    }


    public async void CheckOut()
    {
        // if (CartItems.Count() == 0)
        // {
        //     OutputHandler = new OutputHandler
        //         {
        //             IsErrorOccured = true,
        //             Message = "No items in the Cart"
        //         };

        //     return;
        // }
        CheckoutOptionIsActive = true;

    }


    public async void Cash()
    {
        OutputHandler = new OutputHandler
                {
                    IsErrorOccured = false,
                    Message = ""
                };
        Paymode = "CASH";
        Payment.AmountExpected = Total;
        OnShowCashModal();
    }
    public async void Visa()
    {

        OnShowCashModal();
    }
    public async void MobileMoney()
    {

        OnShowCashModal();
    }



    protected async Task RequestDelete()
    {
        Supplier.IsDeleted = true;
        Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");
        Supplier.LoggedInUserRole = await sessionStorage.GetItemAsync<string>("Role");
        //Supplier.
        // Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
        OutputHandler = await httpHandler.Delete<SupplierDTO>("Supplier/DeleteRequest", Supplier);
        if (OutputHandler.IsErrorOccured == false)
        {
            NavigationManager.NavigateTo("/Supplier/SupplierConfiguration", true);


            StateHasChanged();
            OnProccessCompleteNotify();
            OnHideModalClick();
        }
        else
        {
            OnProccessCompleteNotify();

        }
    }





    protected async Task Delete(int cartItemId)
    {



        CartItemsDTO cartItem = CartItems.Where(x => x.CartItemId == cartItemId).FirstOrDefault();
        if (cartItem != null)
        {
            cartItem.ShopId = ShopId;
            cartItem.LoggedInUsername = await sessionStorage.GetItemAsync<string>("LoggedInUser");

            // Supplier.DeletedBy = await sessionStorage.GetItemAsync<string>("MachineName");
            OutputHandler = await httpHandler.Update<CartItemsDTO>("Pos/RemoveFromCart", cartItem);
            if (OutputHandler.IsErrorOccured == false)
            {
                CartItems.Remove(cartItem);
                StateHasChanged();
                OnProccessCompleteNotify();
            }
            else
            {
                OnProccessCompleteNotify();

            }
        }

        StateHasChanged();

    }

    private Modal modal = default!;
    private Modal cashModal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnShowCashModal()
    {
        await cashModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    private async Task OnHideCashModalClick()
    {
        await cashModal.HideAsync();
    }

    private void OnProccessCompleteNotify()
    {
        ToastService.Notify(new(ToastType.Info, $"{OutputHandler.Message}"));
    }
    private string searchTerm = string.Empty;
    private int selectedItem;

    // Method to handle search input changes
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
    }

    // Method to handle item selection
    private void SelectItem(int item, string ProductName)
    {
        selectedItem = item;
        ProductSearch.ProductCode = item.ToString();
        searchTerm = ProductName;
    }
    
}




